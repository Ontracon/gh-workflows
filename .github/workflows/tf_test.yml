on:
  workflow_call:
    inputs:
      deployment:
        required: false
        type: string
        default: 'false'
    secrets:
      token:
        required: false

jobs:
  tf_base:
    name: Base check
    runs-on: [Linux]
    environment: prd
    env:
      ARM_USE_OIDC: true
    outputs:
      files: ${{ steps.files.outputs.files }}
      dirs: ${{ steps.files.outputs.dirs }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Project
        id: get_project
        run: |
         FILE="${{ github.workspace }}/.otc/otc.json"
         echo "otc_region=`jq -c '.otc.otc_region' $FILE`" >> "$GITHUB_OUTPUT"
         echo "aws_cloud_enabled=`jq -c '.project.aws_cloud_enabled' $FILE`" >> "$GITHUB_OUTPUT"
         echo "azr_cloud_enabled=`jq -c '.project.azr_cloud_enabled' $FILE`" >> "$GITHUB_OUTPUT"
         echo "gcp_cloud_enabled=`jq -c '.project.gcp_cloud_enabled' $FILE`" >> "$GITHUB_OUTPUT"
         echo "env_state=`jq -c '.project.environments.prd.state' $FILE`" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        if: ${{ fromJson(steps.get_project.outputs.aws_cloud_enabled)==true }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN}}
          aws-region: 'eu-central-1'

      - name: 'Configure Azure Credentials'
        if: ${{ fromJson(steps.get_project.outputs.azr_cloud_enabled)==true }}
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Configure GCP Credentials'
        if: ${{ fromJson(steps.get_project.outputs.gcp_cloud_enabled)==true }}
        uses: 'google-github-actions/auth@v1.0.0'
        with:
            create_credentials_file: 'true'
            workload_identity_provider: ${{ secrets.GCP_PROVIDER_NAME}}
            service_account: ${{ secrets.GCP_SA_EMAIL}}

      - name: Terraform fmt_check
        uses: otc-code/gh-actions/terraform@main
        with:
          TF_DIR: '${{ github.workspace }}'
          TERRAFORM_ACTION: 'fmt_check'

      - name: Terraform init
        id: init
        uses: otc-code/gh-actions/terraform@main
        with:
          TF_DIR: '${{ github.workspace }}'
          TERRAFORM_ACTION: 'init'
          GITHUB_TOKEN: ${{ secrets.ORG_TOKEN }}
          TF_PARTIAL_BACKEND_FILE: '${{ github.workspace }}/.otc/prd.tfbackend'
          GCP_PROJECT_ID: 'otc-ontracon'

      - name: Terraform validate
        id: validate
        uses: otc-code/gh-actions/terraform@main
        with:
          TF_DIR: '${{ github.workspace }}'
          TERRAFORM_ACTION: 'validate'

      - name: Terraform plan
        if: ${{ fromJson(steps.get_project.outputs.env_state)!='destroy' }}
        id: plan
        uses: otc-code/gh-actions/terraform@main
        with:
          TF_DIR: ${{ github.workspace }}
          TERRAFORM_ACTION: 'plan'
          TF_VARS_FILE: '${{ github.workspace }}/env/prd/terraform.tfvars'
          OTC_TF_VARS_FILE: '${{ github.workspace }}/.otc/otc.json'
          AUTO_TF_VARS_FILE: '${{ github.workspace }}/env/prd/auto.tfvars.json'
          GCP_PROJECT_ID: 'otc-ontracon'

      - name: Terraform plan destroy
        if: ${{ fromJson(steps.get_project.outputs.env_state)=='destroy' }}
        id: plan_destroy
        uses: otc-code/gh-actions/terraform@main
        with:
          TF_DIR: ${{ github.workspace }}
          TERRAFORM_ACTION: 'plan_destroy'
          TF_VARS_FILE: '${{ github.workspace }}/env/prd/terraform.tfvars'
          OTC_TF_VARS_FILE: '${{ github.workspace }}/.otc/otc.json'
          AUTO_TF_VARS_FILE: '${{ github.workspace }}/env/prd/auto.tfvars.json'
          GCP_PROJECT_ID: 'otc-ontracon'

      - name: Comment PR
        if: always()
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            # Production change summary:
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Destroy \`${{ steps.plan_destroy.outcome }}\`

            ${{ env.PLAN_SUMMARY }}

  tf_security:
    name: Security check
    needs: tf_base
    runs-on: [Linux]
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: IaC security (KICS)
        uses: checkmarx/kics-github-action@v1.6.3
        with:
          path: ${{ github.workspace }}
          #ignore_on_exit: results
          disable_secrets: true
          fail_on: 'high,medium'
          #output_path: '${{ github.workspace }}/results.sarif'
          enable_comments: true
          comments_with_queries: true
          cloud_provider: 'aws, azure, gcp'
          token: ${{ secrets.GITHUB_TOKEN }}
          exclude_paths: './.terraform/**' # Don't test modules
          #exclude_queries: 'ef0b316a-211e-42f1-888e-64efe172b755,96ed3526-0179-4c73-b1b2-372fde2e0d13,96ed3526-0179-4c73-b1b2-372fde2e0d13,fd632aaf-b8a1-424d-a4d1-0de22fd3247a'
